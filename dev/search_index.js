var documenterSearchIndex = {"docs":
[{"location":"api/#api","page":"Function Index","title":"PowerGraphics API","text":"","category":"section"},{"location":"api/","page":"Function Index","title":"Function Index","text":"Modules = [PowerGraphics]\nPublic = true","category":"page"},{"location":"api/#PowerGraphics.categorize_data-Tuple{Dict{Symbol, DataFrames.DataFrame}, Dict}","page":"Function Index","title":"PowerGraphics.categorize_data","text":"Re-categorizes data according to an aggregation dictionary\n\nmakes no guarantee of complete data collection *\n\nExample\n\naggregation = PG.make_fuel_dictionary(results_uc.system)\ncategorize_data(gen_uc.data, aggregation)\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.combine_categories-Tuple{Union{Dict{String, DataFrames.DataFrame}, Dict{Symbol, DataFrames.DataFrame}}}","page":"Function Index","title":"PowerGraphics.combine_categories","text":"aggregates and combines data into single DataFrame\n\nExample\n\nPG.combine_categories(gen_uc.data)\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.get_generator_category-Tuple{Any, Any, Dict{NamedTuple, String}}","page":"Function Index","title":"PowerGraphics.get_generator_category","text":"Return the generator category for this fuel and unit_type.\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.get_generator_mapping","page":"Function Index","title":"PowerGraphics.get_generator_mapping","text":"Return a dict where keys are a tuple of input parameters (fuel, unit_type) and values are generator types.\n\n\n\n\n\n","category":"function"},{"location":"api/#PowerGraphics.make_fuel_dictionary-Tuple{PowerSystems.System, Dict{NamedTuple, String}}","page":"Function Index","title":"PowerGraphics.make_fuel_dictionary","text":"generators = make_fuel_dictionary(system::PSY.System, mapping::Dict{NamedTuple, String})\n\nThis function makes a dictionary of fuel type and the generators associated.\n\nArguments\n\nsys::PSY.System: the system that is used to create the results\nresults::IS.Results: results\n\nKey Words\n\ncategories::Dict{String, NamedTuple}: if stacking by a different category is desired\n\nExample\n\nresults = solveopmodel!(OpModel) generators = makefueldictionary(sys)\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.plot_demand!-Tuple{Any, Union{InfrastructureSystems.Results, PowerSystems.System}}","page":"Function Index","title":"PowerGraphics.plot_demand!","text":"plot_demand!(plot, results)\nplot_demand!(plot, system)\n\nThis function makes a plot of the demand in the system.\n\nArguments\n\nplot : existing plot handle\nresult::Union{IS.Results, PSY.System} : simulation results or PowerSystems.System\n\nAccepted Key Words\n\nlinestyle::Symbol = :dash : set line style\ntitle::String: Set a title for the plots\nhorizon::Int64: To plot a shorter window of time than the full results\ninitial_time::DateTime: To start the plot at a different time other than the results initial time\naggregate::String = \"System\", \"PowerLoad\", or \"Bus\": aggregate the demand other than by generator\nset_display::Bool = true: set to false to prevent the plots from displaying\nsave::String = \"file_path\": set a file path to save the plots\nformat::String = \"png\": set a different format for saving a PlotlyJS plot\nseriescolor::Array: Set different colors for the plots\ntitle::String = \"Title\": Set a title for the plots\nstack::Bool = true: stack plot traces\nbar::Bool : create bar plot\nnofill::Bool : force empty area fill\nstair::Bool: Make a stair plot instead of a stack plot\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.plot_fuel!-Tuple{Any, InfrastructureSystems.Results}","page":"Function Index","title":"PowerGraphics.plot_fuel!","text":"plot_fuel!(plot, results)\n\nThis function makes a stack plot of the results by fuel type and assigns each fuel type a specific color.\n\nArguments\n\nplot : existing plot handle (optional)\nres::PSI.Results : results to be plotted\n\nAccepted Key Words\n\ngenerator_mapping_file = \"file_path\" : file path to yaml definig generator category by fuel and primemover\nvariables::Union{Nothing, Vector{Symbol}} = nothing : specific variables to plot\nslacks::Bool = true : display slack variables\nload::Bool = true : display load line\ncurtailment::Bool = true: To plot the curtailment in the stack plot\nset_display::Bool = true: set to false to prevent the plots from displaying\nsave::String = \"file_path\": set a file path to save the plots\nformat::String = \"png\": set a different format for saving a PlotlyJS plot\nseriescolor::Array: Set different colors for the plots\ntitle::String = \"Title\": Set a title for the plots\nstack::Bool = true: stack plot traces\nbar::Bool : create bar plot\nnofill::Bool : force empty area fill\nstair::Bool: Make a stair plot instead of a stack plot\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.plot_pgdata!-Tuple{Any, PowerGraphics.PGData}","page":"Function Index","title":"PowerGraphics.plot_pgdata!","text":"plot_pgdata!(plot, pgdata)\n\nThis function makes a plot of a PGdata object\n\nArguments\n\nplot : existing plot handle (optional)\npgdata::PGData: The dataframe to be plotted\n\nAccepted Key Words\n\ncombine_categories::Bool = false : plot category values or each value in a category\ncurtailment::Bool: plot the curtailment with the variable\nset_display::Bool = true: set to false to prevent the plots from displaying\nsave::String = \"file_path\": set a file path to save the plots\nformat::String = \"png\": set a different format for saving a PlotlyJS plot\nseriescolor::Array: Set different colors for the plots\ntitle::String = \"Title\": Set a title for the plots\nstack::Bool = true: stack plot traces\nbar::Bool : create bar plot\nnofill::Bool : force empty area fill\nstair::Bool: Make a stair plot instead of a stack plot\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.plot_pgdata-Tuple{PowerGraphics.PGData}","page":"Function Index","title":"PowerGraphics.plot_pgdata","text":"plot_pgdata(pgdata)\n\nThis function makes a plot of a PGdata object\n\nArguments\n\npgdata::PGData: The dataframe to be plotted\n\nAccepted Key Words\n\ncombine_categories::Bool = false : plot category values or each value in a category\ncurtailment::Bool: plot the curtailment with the variable\nset_display::Bool = true: set to false to prevent the plots from displaying\nsave::String = \"file_path\": set a file path to save the plots\nformat::String = \"png\": set a different format for saving a PlotlyJS plot\nseriescolor::Array: Set different colors for the plots\ntitle::String = \"Title\": Set a title for the plots\nstack::Bool = true: stack plot traces\nbar::Bool : create bar plot\nnofill::Bool : force empty area fill\nstair::Bool: Make a stair plot instead of a stack plot\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.plot_results!-Tuple{Any, Dict{String, DataFrames.DataFrame}}","page":"Function Index","title":"PowerGraphics.plot_results!","text":"plot_results!(plot, results)\n\nThis function makes a plot of a results dictionary\n\nArguments\n\nplot : existing plot handle (optional)\nresults::Dict{String, DataFrame}: The results to be plotted\n\nAccepted Key Words\n\ncombine_categories::Bool = false : plot category values or each value in a category\ncurtailment::Bool: plot the curtailment with the variable\nset_display::Bool = true: set to false to prevent the plots from displaying\nsave::String = \"file_path\": set a file path to save the plots\nformat::String = \"png\": set a different format for saving a PlotlyJS plot\nseriescolor::Array: Set different colors for the plots\ntitle::String = \"Title\": Set a title for the plots\nstack::Bool = true: stack plot traces\nbar::Bool : create bar plot\nnofill::Bool : force empty area fill\nstair::Bool: Make a stair plot instead of a stack plot\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.plot_results-Tuple{Dict{String, DataFrames.DataFrame}}","page":"Function Index","title":"PowerGraphics.plot_results","text":"plot_results(results)\n\nThis function makes a plot of a results dictionary object\n\nArguments\n\nresults::Dict{String, DataFrame: The results to be plotted\n\nAccepted Key Words\n\ncombine_categories::Bool = false : plot category values or each value in a category\ncurtailment::Bool: plot the curtailment with the variable\nset_display::Bool = true: set to false to prevent the plots from displaying\nsave::String = \"file_path\": set a file path to save the plots\nformat::String = \"png\": set a different format for saving a PlotlyJS plot\nseriescolor::Array: Set different colors for the plots\ntitle::String = \"Title\": Set a title for the plots\nstack::Bool = true: stack plot traces\nbar::Bool : create bar plot\nnofill::Bool : force empty area fill\nstair::Bool: Make a stair plot instead of a stack plot\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.report-Tuple{InfrastructureSystems.Results, String, String}","page":"Function Index","title":"PowerGraphics.report","text":"report(res::IS.Results, out_path::String, design_template::String)\n\nThis function uses Weave.jl to either generate a LaTeX or HTML file based on the reportdesign.jmd (julia markdown) file that it reads. Outpath in the weave function dictates where the created file gets exported. An example template is available here\n\nArguments\n\nresults::IS.Results: The results to be plotted\nout_path::String: folder path to the location the report should be generated\ndesign_template::String = \"file_path\": directs the function to the julia markdown report design, the default\n\nExample\n\nresults = solve_op_problem!(OpModel)\nout_path = \"/Users/downloads\"\nreport(results, out_path, template)\n\nAccepted Key Words\n\ndoctype::String = \"md2html\": create an HTML, default is PDF via latex\nbackend::Plots.backend() = plotlyjs(): sets the plots backend, default is gr()\n\n\n\n\n\n","category":"method"},{"location":"api/#PowerGraphics.save_plot-Tuple{Any, String}","page":"Function Index","title":"PowerGraphics.save_plot","text":"save_plot(plot, filename)\n\nSaves plot to specified filename\n\nArguments\n\nplot: plot object\nfilename::String : save to filename\n\nExample\n\nres = solve_op_problem!(OpProblem)\nplot = plot_fuel(res)\nsave_plot(plot, \"my_plot.png\")\n\nAccepted Key Words (currently only implemented for PlotlyJS backend)\n\nwidth::Union{Nothing,Int}=nothing\nheight::Union{Nothing,Int}=nothing\nscale::Union{Nothing,Real}=nothing\n\n\n\n\n\n","category":"method"},{"location":"examples/#PowerGraphics.jl-Examples","page":"Examples","title":"PowerGraphics.jl Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"TODO: Add better examples","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Example of Bar and Stack Plots on SIIPExamples","category":"page"},{"location":"#PowerGraphics.jl","page":"Home","title":"PowerGraphics.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerGraphics.jl is a Julia package for plotting results from PowerSimulations.jl.","category":"page"},{"location":"#Backends","page":"Home","title":"Backends","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PowerGraphics.jl relies on Plots.jl to enable plotting via different backends. Currently, two backends are supported:","category":"page"},{"location":"","page":"Home","title":"Home","text":"GR (default): creates static plots - run the gr() command to load\nPlotlyJS: creates interactive plots - run the plotlyjs() command to load","category":"page"},{"location":"#Making-Figures","page":"Home","title":"Making Figures","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Each of the plot* functions exported by PowerGraphics will create a plot via the specified backend (see above). Some control on the appearance of those figures is available with the following key word arguments passed to the plot_* command.","category":"page"},{"location":"#Arguments-to-control-figure-visibility,-colors,-and-display","page":"Home","title":"Arguments to control figure visibility, colors, and display","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"set_display::Bool = true: set to false to prevent the plots from displaying\nsave::String = \"file_path\": set a file path to save the plots\nformat::String = \"png\": set a different format for saving a PlotlyJS plot\nseriescolor::Array: Set different colors for the plots\ntitle::String = \"Title\": Set a title for the plots","category":"page"},{"location":"#Arguments-to-control-figure-type-and-layout","page":"Home","title":"Arguments to control figure type and layout","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"stack::Bool = true: stack plot traces\nbar::Bool : create bar plot\nnofill::Bool : force empty area fill\nstair::Bool: Make a stair plot instead of a stack plot","category":"page"},{"location":"#Arguments-to-control-data-used-for-plotting","page":"Home","title":"Arguments to control data used for plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"slacks::Bool = true : display slack variables\nload::Bool = true : display load line\ncurtailment::Bool = true: To plot the curtailment in the stack plot\ngenerator_mapping_file = \"file_path\" : file path to yaml definig generator category by fuel and primemover\nvariables::Union{Nothing, Vector{Symbol}} = nothing : specific variables to plot","category":"page"},{"location":"#Contributors","page":"Home","title":"Contributors","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Clayton Barrows","category":"page"}]
}
